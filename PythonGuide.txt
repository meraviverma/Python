4.1. if Statements
---------------------------
Perhaps the most well-known statement type is the if statement. For example:

>>> x = int(input("Please enter an integer: "))
Please enter an integer: 42
>>> if x < 0:
...     x = 0
...     print('Negative changed to zero')
... elif x == 0:
...     print('Zero')
... elif x == 1:
...     print('Single')
... else:
...     print('More')

4.2. for Statements
--------------------------
The for statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Pythonâ€™s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended):

>>> # Measure some strings:
... words = ['cat', 'window', 'defenestrate']
>>> for w in words:
...     print(w, len(w))

Code that modifies a collection while iterating over that same collection can be tricky to get right. Instead, it is usually more straight-forward to loop over a copy of the collection or to create a new collection:

# Strategy:  Iterate over a copy

for user, status in users.copy().items():
    if status == 'inactive':
        del users[user]

# Strategy:  Create a new collection
active_users = {}
for user, status in users.items():
    if status == 'active':
        active_users[user] = status

4.3. The range() Function
----------------------------
If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It generates arithmetic progressions:

>>> for i in range(5):
...     print(i)
...
0
1
2
3
4

4.4. break and continue Statements, and else Clauses on Loops
---------------------------------------------------------------
The break statement, like in C, breaks out of the innermost enclosing for or while loop.

Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of the iterable (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement. This is exemplified by the following loop, which searches for prime numbers:

>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(n, 'equals', x, '*', n//x)
...             break
...     else:
...         # loop fell through without finding a factor
...         print(n, 'is a prime number')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3


############### PROGRAM #########################
----------------------------------------------------
Q) Get the count of word count for each letter.
----------------------------------------------------
url = 'www.google.com'
print(url)
pydict={}
for i in url:
    if(i in pydict.keys()):
        pydict[i]=pydict[i]+1
    else:
        pydict[i]=1
        
del pydict['.']
print(pydict)
for key in pydict:
    print(key,'->',pydict[key])
	
Output:
www.google.com
{'w': 3, 'g': 2, 'o': 3, 'l': 1, 'e': 1, 'c': 1, 'm': 1}
w -> 3
g -> 2
o -> 3
l -> 1
e -> 1
c -> 1
m -> 1

#############################################################
